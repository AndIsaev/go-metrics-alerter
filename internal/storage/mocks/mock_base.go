// Code generated by MockGen. DO NOT EDIT.
// Source: internal/storage/base.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	common "github.com/AndIsaev/go-metrics-alerter/internal/common"
	gomock "github.com/golang/mock/gomock"
)

// MockBaseStorage is a mock of BaseStorage interface.
type MockBaseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBaseStorageMockRecorder
}

// MockBaseStorageMockRecorder is the mock recorder for MockBaseStorage.
type MockBaseStorageMockRecorder struct {
	mock *MockBaseStorage
}

// NewMockBaseStorage creates a new mock instance.
func NewMockBaseStorage(ctrl *gomock.Controller) *MockBaseStorage {
	mock := &MockBaseStorage{ctrl: ctrl}
	mock.recorder = &MockBaseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBaseStorage) EXPECT() *MockBaseStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBaseStorage) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBaseStorageMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBaseStorage)(nil).Close), ctx)
}

// Create mocks base method.
func (m *MockBaseStorage) Create(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockBaseStorageMockRecorder) Create(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockBaseStorage)(nil).Create), ctx)
}

// Get mocks base method.
func (m *MockBaseStorage) Get(ctx context.Context, metric common.Metrics) (*common.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, metric)
	ret0, _ := ret[0].(*common.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockBaseStorageMockRecorder) Get(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockBaseStorage)(nil).Get), ctx, metric)
}

// Insert mocks base method.
func (m *MockBaseStorage) Insert(ctx context.Context, metric common.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockBaseStorageMockRecorder) Insert(ctx, metric interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockBaseStorage)(nil).Insert), ctx, metric)
}

// InsertBatch mocks base method.
func (m *MockBaseStorage) InsertBatch(ctx context.Context, metrics []common.Metrics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertBatch", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertBatch indicates an expected call of InsertBatch.
func (mr *MockBaseStorageMockRecorder) InsertBatch(ctx, metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertBatch", reflect.TypeOf((*MockBaseStorage)(nil).InsertBatch), ctx, metrics)
}

// Ping mocks base method.
func (m *MockBaseStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockBaseStorageMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockBaseStorage)(nil).Ping), ctx)
}
